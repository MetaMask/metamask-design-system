// import figma needs to remain as figma otherwise it breaks code connect
// eslint-disable-next-line import-x/no-named-as-default
import figma from '@figma/code-connect';
import React from 'react';

import { Button } from './Button';

import { ButtonVariant, ButtonSize } from '.';
import { IconName } from '../Icon';

/**
 * -- This file was auto-generated by Code Connect --
 * React web implementation of Button component
 * `props` includes a mapping from Figma properties and variants to
 * suggested values. You should update this to match the props of your
 * code component, and update the `example` function to return the
 * code example you'd like to see in Figma
 */

figma.connect(
  Button,
  'https://www.figma.com/design/1D6tnzXqWgnUC3spaAOELN/%F0%9F%A6%8A-WIP--MMDS-Components?node-id=1%3A304',
  {
    props: {
      variant: figma.enum('variant', {
        Primary: ButtonVariant.Primary,
        Secondary: ButtonVariant.Secondary,
        Tertiary: ButtonVariant.Tertiary,
      }),
      // Extract size and label from nested ButtonBase component
      buttonBase: figma.nestedProps('ButtonBase', {
        size: figma.enum('size', {
          Sm: ButtonSize.Sm,
          Md: ButtonSize.Md,
          Lg: ButtonSize.Lg,
        }),
        label: figma.string('label'),
        startIconName: figma.boolean('startIcon (Figma Only)', {
          true: IconName.Add,
          false: undefined,
        }),
        endIconName: figma.boolean('endIcon (Figma Only)', {
          true: IconName.Add,
          false: undefined,
        }),
      }),
      loadingText: figma.nestedProps('_Loading Label', {
        text: figma.boolean('show loadingText', {
          true: figma.string('loadingText'),
          false: undefined,
        }),
      }),
      isFullWidth: figma.boolean('isFullWidth'),
      isLoading: figma.boolean('isLoading'),
      isDisabled: figma.boolean('isDisabled'),
      isDanger: figma.boolean('isDanger'),
      isInverse: figma.boolean('isInverse'),
    },
    example: ({
      variant,
      buttonBase,
      isFullWidth,
      isLoading,
      isDisabled,
      isDanger,
      isInverse,
      loadingText,
      ...props
    }) => (
      <Button
        variant={variant}
        size={buttonBase.size}
        isFullWidth={isFullWidth}
        isLoading={isLoading}
        loadingText={loadingText.text}
        isDisabled={isDisabled}
        isDanger={isDanger}
        isInverse={isInverse}
        startIconName={buttonBase.startIconName}
        endIconName={buttonBase.endIconName}
        {...props}
      >
        {buttonBase.label}
      </Button>
    ),
  },
);
