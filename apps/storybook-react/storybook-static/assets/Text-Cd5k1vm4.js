import{r as l,j as p}from"./iframe-BknD6R0A.js";import{T as t,m as S,c as O}from"./index-CiWXofBh.js";import{t as C}from"./tw-merge-B12XlTeZ.js";function M(e,n){typeof e=="function"?e(n):e!=null&&(e.current=n)}function w(...e){return n=>e.forEach(o=>M(o,n))}var c=l.forwardRef((e,n)=>{const{children:o,...i}=e,a=l.Children.toArray(o),d=a.find(k);if(d){const r=d.props.children,s=a.map(m=>m===d?l.Children.count(r)>1?l.Children.only(null):l.isValidElement(r)?r.props.children:null:m);return p.jsx(g,{...i,ref:n,children:l.isValidElement(r)?l.cloneElement(r,void 0,s):null})}return p.jsx(g,{...i,ref:n,children:o})});c.displayName="Slot";var g=l.forwardRef((e,n)=>{const{children:o,...i}=e;if(l.isValidElement(o)){const a=N(o);return l.cloneElement(o,{...A(i,o.props),ref:n?w(n,a):a})}return l.Children.count(o)>1?l.Children.only(null):null});g.displayName="SlotClone";var R=({children:e})=>p.jsx(p.Fragment,{children:e});function k(e){return l.isValidElement(e)&&e.type===R}function A(e,n){const o={...n};for(const i in n){const a=e[i],d=n[i];/^on[A-Z]/.test(i)?a&&d?o[i]=(...s)=>{d(...s),a(...s)}:a&&(o[i]=a):i==="style"?o[i]={...a,...d}:i==="className"&&(o[i]=[a,d].filter(Boolean).join(" "))}return{...e,...o}}function N(e){var i,a;let n=(i=Object.getOwnPropertyDescriptor(e.props,"ref"))==null?void 0:i.get,o=n&&"isReactWarning"in n&&n.isReactWarning;return o?e.ref:(n=(a=Object.getOwnPropertyDescriptor(e,"ref"))==null?void 0:a.get,o=n&&"isReactWarning"in n&&n.isReactWarning,o?e.props.ref:e.props.ref||e.ref)}const B={[t.DisplayLg]:"text-s-display-lg leading-s-display-lg tracking-s-display-lg md:text-l-display-lg md:leading-l-display-lg md:tracking-l-display-lg",[t.DisplayMd]:"text-s-display-md leading-s-display-md tracking-s-display-md md:text-l-display-md md:leading-l-display-md md:tracking-l-display-md",[t.HeadingLg]:"text-s-heading-lg leading-s-heading-lg tracking-s-heading-lg md:text-l-heading-lg md:leading-l-heading-lg md:tracking-l-heading-lg",[t.HeadingMd]:"text-s-heading-md leading-s-heading-md tracking-s-heading-md md:text-l-heading-md md:leading-l-heading-md md:tracking-l-heading-md",[t.HeadingSm]:"text-s-heading-sm leading-s-heading-sm tracking-s-heading-sm md:text-l-heading-sm md:leading-l-heading-sm md:tracking-l-heading-sm",[t.BodyLg]:"text-s-body-lg leading-s-body-lg tracking-s-body-lg md:text-l-body-lg md:leading-l-body-lg md:tracking-l-body-lg",[t.BodyMd]:"text-s-body-md leading-s-body-md tracking-s-body-md md:text-l-body-md md:leading-l-body-md md:tracking-l-body-md",[t.BodySm]:"text-s-body-sm leading-s-body-sm tracking-s-body-sm md:text-l-body-sm md:leading-l-body-sm md:tracking-l-body-sm",[t.BodyXs]:"text-s-body-xs leading-s-body-xs tracking-s-body-xs md:text-l-body-xs md:leading-l-body-xs md:tracking-l-body-xs"},D={[t.DisplayLg]:"font-bold md:font-medium",[t.DisplayMd]:"font-bold md:font-medium",[t.HeadingLg]:"font-bold",[t.HeadingMd]:"font-bold",[t.HeadingSm]:"font-bold",[t.BodyLg]:"font-medium",[t.BodyMd]:"font-regular",[t.BodySm]:"font-regular",[t.BodyXs]:"font-regular"},E={[t.DisplayLg]:"h1",[t.DisplayMd]:"h1",[t.HeadingLg]:"h2",[t.HeadingMd]:"h3",[t.HeadingSm]:"h4",[t.BodyLg]:"p",[t.BodyMd]:"p",[t.BodySm]:"p",[t.BodyXs]:"p"},V=({variant:e=t.BodyMd,children:n,className:o,fontWeight:i,fontFamily:a=S.Default,fontStyle:d,textTransform:r,textAlign:s,overflowWrap:m,ellipsis:f,asChild:y,color:u=O.TextDefault,style:h,...x})=>{const T=y?c:E[e],b=`${C(u,B[e],i||D[e],d,r,s,m,f&&"truncate",o)} ${a}`.trim();return p.jsx(T,{className:b,style:h,...x,children:n})};V.__docgenInfo={description:"",methods:[],displayName:"Text",props:{style:{required:!1,tsType:{name:"ReactCSSProperties",raw:"React.CSSProperties"},description:"Optional prop for inline styles"},variant:{required:!1,tsType:{name:"TextVariant"},description:`Optional prop to change the font size of the component. The Text component uses responsive font sizes.
Different variants map to specific HTML elements by default.

@default TextVariant.BodyMd`,defaultValue:{value:"TextVariant.BodyMd",computed:!0}},children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"The text content or elements to be rendered within the component."},className:{required:!1,tsType:{name:"string"},description:"Optional prop for additional CSS classes to be applied to the Text component."},fontWeight:{required:!1,tsType:{name:"FontWeight"},description:`Optional prop to control the font weight of the text.
Regular: 400
Medium: 500
Bold: 700`},fontFamily:{required:!1,tsType:{name:"FontFamily"},description:`Optional prop to adjust the font family.
Default: CentraNo1
Accent: MMSans
Hero: MMPoly`,defaultValue:{value:"FontFamily.Default",computed:!0}},fontStyle:{required:!1,tsType:{name:"FontStyle"},description:`Optional prop to control the font style of the text.
Options: Normal, Italic`},textTransform:{required:!1,tsType:{name:"TextTransform"},description:`Optional prop to apply text transformation to the content.
Options: Uppercase, Lowercase, Capitalize, Normal`},textAlign:{required:!1,tsType:{name:"TextAlign"},description:`Optional prop to control the text alignment within its container.
Options: Left, Center, Right, Justify`},overflowWrap:{required:!1,tsType:{name:"OverflowWrap"},description:`Optional prop to determine how text should wrap when it reaches the edge of its container.
Options: BreakWord, Anywhere, Normal`},ellipsis:{required:!1,tsType:{name:"boolean"},description:`Optional prop that when true, adds an ellipsis (...) when text overflows its container.

@default false`},asChild:{required:!1,tsType:{name:"boolean"},description:`Optional boolean that determines if the component should merge its props onto its immediate child
instead of rendering a default DOM element.

@default false`},color:{required:!1,tsType:{name:"TextColor"},description:`Optional prop that sets the color of the text using predefined theme colors.

@default TextColor.TextDefault`,defaultValue:{value:"TextColor.TextDefault",computed:!0}},"data-testid":{required:!1,tsType:{name:"string"},description:"Optional prop for testing purposes"}}};export{c as S,V as T,R as a};
